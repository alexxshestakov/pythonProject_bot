"""
–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º channel id
"""

''' –∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫'''
import logging
from aiogram import Bot, Dispatcher, executor, types
from os import getenv
from sys import exit
from aiogram.utils.markdown import text, bold
from aiogram.types import ParseMode

#—Å–æ–∑–¥–∞–¥–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_ID –∏ CH_ID
bot_token = getenv("BOT_ID")
if not bot_token:
    exit("Error: no bot token provided")

channel_token = getenv("CH_ID")
if not channel_token:
    exit("Error: no channel token provided")

API_TOKEN = bot_token
CHANNEL_ID = channel_token

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ (–µ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
bot = Bot(token=API_TOKEN)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
dp = Dispatcher(bot)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """
    `/start` –∏–ª–∏ `/help`
    """
    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btns_text = ('–î–∞!', '–ù–µ—Ç!')
    keyboard_markup.row(*(types.KeyboardButton(text) for text in btns_text))

    await message.reply("–ü—Ä–∏–≤–µ—Ç!üëã\n–Ø –±–æ—Ç ü§ñ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ –∫–∞–Ω–∞–ª!")
    await message.answer("–ì–æ—Ç–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏?"
                       + ' {user}!'.format(user=message.from_user.full_name), reply_markup=keyboard_markup)

@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    msg = text(bold('–Ø –º–æ–≥—É üòé –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:'),
               '/start - —Å—Ç–∞—Ä—Ç', '/dice - –±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä–∞–ª—å–Ω—É—é –∫–æ—Å—Ç—å', '/help - –ø–æ–º–æ—â—å', sep='\n')
    await message.reply(msg, parse_mode=ParseMode.MARKDOWN)

@dp.message_handler(commands="dice")
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")

@dp.message_handler()
async def all_msg_handler(message: types.Message):
    button_text = message.text
    logger.debug('The answer is %r', button_text)

    if button_text == '–î–∞!':
        reply_text = "–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–∏—Å—ã–ª–∞–π üòá !!!"
    elif button_text == '–ù–µ—Ç!':
        reply_text = " –û –Ω–µ—Ç, –ø–æ—á–µ–º—É —Ä–∞—Å—Ö–æ—Ç–µ–ª ? üëÄ\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–Ω–æ–≤–∞ –∂–º–∏ /start "
    elif button_text.lower() in ['–ø—Ä–∏–≤–µ—Ç', '–ø—Ä–∏–≤', 'hi', 'Hello', '']:
        reply_text = " –ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –±–æ—Ç ü§ñ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ –∫–∞–Ω–∞–ª!\n–ñ–º–∏ /start "
    elif button_text.lower() in ['–ø–æ–∫–∞', 'bye', 'goodbye']:
        reply_text = " –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è üòï"
    else:
        reply_text = "–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ üëê ... –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µüëç.\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start"

    await message.reply(reply_text, reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(content_types=["photo"])
async def send_photo(message: types.Message):
    """–ü–µ—Ä–µ—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª"""
    date = message.date  # –î–ê–¢–ê, –í–†–ï–ú–Ø –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø
    photo_id = message.photo[-1].file_id
    rep_text = message.text
    await message.answer("–î–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª üëå")
    await bot.send_photo(CHANNEL_ID, photo_id, caption='–î–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–∞ –±–æ—Ç–æ–º ü§ñ')

'''–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'''
if __name__ == '__main__':
    '''–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª –ø–æ—Å—Ç–æ—è–Ω–Ω–æ '''
    executor.start_polling(dp, skip_updates=True)

